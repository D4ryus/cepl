FROM ARCSYNTHESIS

Mismatched Attributes and Programs

You may be wondering what happens if there is a 
mis-match between the attributes provided by a VAO
and the vertex shader inputs. For example, we 
could use the position-only vertex shader with a
mesh that provides attributes 0 and 1, with 0 
being the position and 1 being the color.

OpenGL is actually very lenient about this sort of
thing. It also goes through some effort to fully 
define what information the vertex shader gets in
the event of a mismatch.

A VAO can provide attributes that a vertex shader
does not use without penalty. Well, there may be
a performance penalty for reading unused
information, but it will still render correctly.

If a vertex shader takes attributes that the VAO
does not provide, then the value the vertex shader
gets will be a vector of (0, 0, 0, 1). If the
vertex shader input vector has fewer than 4 elements,
then it fills them in in that order. A vec3 input
that is not provided by the VAO will be (0, 0, 0).

Speaking of which, if a VAO provides more components
of an attribute vector than the vertex shader
expects (the VAO provides 4 elements, but the vertex
shader input is a vec2), then the vertex shader 
input will be filled in as much as it can be. If the
reverse is true, if the VAO does not provide enough
components of the vector, then the unfilled values
are always filled in from the (0, 0, 0, 1) vector.