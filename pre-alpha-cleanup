Ok so we are going to kill as many of the cases where :: is used

* find all defmethods. Pull everything truely generic into cepl-generics
* establish a type for the return, lets get an established grammer going


* find your targets with grep -nHIir -e "::" *
- done, can justify all of them now

* expose +default-resolution+
- done :)

* remove cepl.lisp
- Done! took a lot of shuffling to get most of the logic into context.lisp

* camera 'frame-size is a vector, this doesnt match other resolutions
* I actually dont like the resolutions being lists rather than vectors
  but I hate not bein able to #'apply the resolution to a function.
  What if EVERYTHING in cepl that took a resolution could take either
  vector or list? Would it hurt our ability to optimize anywhere?
- Done the 'make it a list bit' but not the second bullet point
- Ok so what I have gone for is to make #'v! be able to take lists
  this gives a really easy way to transform a result to a vec.
  The optimization case is bogus as for things like viewport we should
  use the struct to pack the data well and then have internal functions
  we can use to get the values fast, and a use facing func to make it pretty

* should v:x->w be exposed in cepl? it feels like something we would do so
  often that it should be there...maybe leave that to users/ceplive
- yeah that is for others to decide

* default-resolution doesnt know about viewport calls on default framebuffer
  This is a shame. We can start by making viewport set this, but then we get
  issue where we are hoping all state is managed through cepl...may add it for
  now and re-examine it later.

* sdl.evt sucks, just make it evt
- done

* #'clear-fbo should be #'clear with optional fbo arg
- done (kinda)

* mesh.lisp has package cgl..why?
- now in "meshes" package

* add %px to def-compose-dispatch. It is a symbolmacro that expands to (%view-pixel-size)
  which is a local func that

* what in examples specifies a package, why? Mainly interested in cgl:
- Nearly golden :)

* remove cls
- done

* add syntax to compose pipelines to make the draw-arrays mask

* add (declare) to defpipeline so you can ignore certain uniforms.
  is this even needed? I dont think uniforms get added to the arg list
  Check it! 