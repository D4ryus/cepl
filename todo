* check qualifiers are valid in varjo
* inherit qualifiers from previous stage
* uniforms saying arg incompatible for basic changes...merge 'em

-----

* merge in the time and data abstraction changes
* we should then have the then & repeat macros as tlambda shorthand
  also add macros for before, after, between. This completes the
  full circle of designing the time api.

-----

* clean up osx code
* clean up window and context creation
* update struct to be clean and use c-ref
* create foreign data extraction tool
* get gamepad input stable
* expand stupid macro in matrix
* optimize the vector/matrix/quaternion functions
* live version of tdefun

-----

* Object that represents the opengl state machine. Directly address slots etc
* Copy between buffer (gpu-arrays)
* Research safe foreign data initialisation so an error does cause a memrory leak
  look at with-foreign-object for hints
* read http://www.opengl.org/wiki/Buffer_Object and look at the buffer corruption section
* base-macros....what is in here and why

-----

* make-gpu-array with list is failing
  ok at really odd  times so is from gl-array... this is odd
  seems to be when created using defparameter...so it doesnt like
  top level for some reason?

* We need a representation of frame buffers...or whatever those
   things are! I kind of feel that running a shader should return
   one. At the very least we will need it later for targets and
   for defining feedback within pipelines.

* add set culling? combined enabling, setting winding-order and
  cull-face in one move.

* stream could have base offset so draw-element-base thingy works

* enable is odd.... can things be made better by spinning out
  it's functionality to other functions?

* uniform buffer objects

* deletion of things in pools in cepl-gl

* :triangle, :lines, etc are called the render-mode or primitive
   do our arg names reflect this?

* bindbufferrange - read about it

* work through the glossaries of arc-synth and check args names
   in cepl-gl for conformance